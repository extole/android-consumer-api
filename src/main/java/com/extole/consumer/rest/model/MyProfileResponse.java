/*
 * Extole consumer-api
 * This is a sample generated doc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@extole.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extole.consumer.rest.model;

import java.util.*;
import java.time.*;
import java.math.*;
import com.extole.consumer.*;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.HashMap;
/**
 * MyProfileResponse
 */


public class MyProfileResponse {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("first_name")
  private String firstName = null;

  @JsonProperty("last_name")
  private String lastName = null;

  @JsonProperty("profile_picture_url")
  private String profilePictureUrl = null;

  @JsonProperty("partner_user_id")
  private String partnerUserId = null;

  @JsonProperty("cookie_consent")
  private String cookieConsent = null;

  /**
   * Gets or Sets cookieConsentType
   */
  public enum CookieConsentTypeEnum {
    EXTOLE("EXTOLE"),
    CLIENT("CLIENT"),
    UNSET("UNSET");

    private String value;

    CookieConsentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CookieConsentTypeEnum fromValue(String text) {
      for (CookieConsentTypeEnum b : CookieConsentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("cookie_consent_type")
  private CookieConsentTypeEnum cookieConsentType = null;

  @JsonProperty("processing_consent")
  private String processingConsent = null;

  /**
   * Gets or Sets processingConsentType
   */
  public enum ProcessingConsentTypeEnum {
    EXTOLE("EXTOLE"),
    CLIENT("CLIENT"),
    UNSET("UNSET");

    private String value;

    ProcessingConsentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ProcessingConsentTypeEnum fromValue(String text) {
      for (ProcessingConsentTypeEnum b : ProcessingConsentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("processing_consent_type")
  private ProcessingConsentTypeEnum processingConsentType = null;

  @JsonProperty("parameters")
  private Map<String, Object> parameters = null;

  @JsonProperty("locale")
  private String locale = null;

  public MyProfileResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MyProfileResponse email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public MyProfileResponse firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @Schema(description = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public MyProfileResponse lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @Schema(description = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public MyProfileResponse profilePictureUrl(String profilePictureUrl) {
    this.profilePictureUrl = profilePictureUrl;
    return this;
  }

   /**
   * Get profilePictureUrl
   * @return profilePictureUrl
  **/
  @Schema(description = "")
  public String getProfilePictureUrl() {
    return profilePictureUrl;
  }

  public void setProfilePictureUrl(String profilePictureUrl) {
    this.profilePictureUrl = profilePictureUrl;
  }

  public MyProfileResponse partnerUserId(String partnerUserId) {
    this.partnerUserId = partnerUserId;
    return this;
  }

   /**
   * Get partnerUserId
   * @return partnerUserId
  **/
  @Schema(description = "")
  public String getPartnerUserId() {
    return partnerUserId;
  }

  public void setPartnerUserId(String partnerUserId) {
    this.partnerUserId = partnerUserId;
  }

  public MyProfileResponse cookieConsent(String cookieConsent) {
    this.cookieConsent = cookieConsent;
    return this;
  }

   /**
   * Get cookieConsent
   * @return cookieConsent
  **/
  @Schema(description = "")
  public String getCookieConsent() {
    return cookieConsent;
  }

  public void setCookieConsent(String cookieConsent) {
    this.cookieConsent = cookieConsent;
  }

  public MyProfileResponse cookieConsentType(CookieConsentTypeEnum cookieConsentType) {
    this.cookieConsentType = cookieConsentType;
    return this;
  }

   /**
   * Get cookieConsentType
   * @return cookieConsentType
  **/
  @Schema(description = "")
  public CookieConsentTypeEnum getCookieConsentType() {
    return cookieConsentType;
  }

  public void setCookieConsentType(CookieConsentTypeEnum cookieConsentType) {
    this.cookieConsentType = cookieConsentType;
  }

  public MyProfileResponse processingConsent(String processingConsent) {
    this.processingConsent = processingConsent;
    return this;
  }

   /**
   * Get processingConsent
   * @return processingConsent
  **/
  @Schema(description = "")
  public String getProcessingConsent() {
    return processingConsent;
  }

  public void setProcessingConsent(String processingConsent) {
    this.processingConsent = processingConsent;
  }

  public MyProfileResponse processingConsentType(ProcessingConsentTypeEnum processingConsentType) {
    this.processingConsentType = processingConsentType;
    return this;
  }

   /**
   * Get processingConsentType
   * @return processingConsentType
  **/
  @Schema(description = "")
  public ProcessingConsentTypeEnum getProcessingConsentType() {
    return processingConsentType;
  }

  public void setProcessingConsentType(ProcessingConsentTypeEnum processingConsentType) {
    this.processingConsentType = processingConsentType;
  }

  public MyProfileResponse parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public MyProfileResponse putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @Schema(description = "")
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }

  public MyProfileResponse locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @Schema(description = "")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MyProfileResponse myProfileResponse = (MyProfileResponse) o;
    return Objects.equals(this.id, myProfileResponse.id) &&
        Objects.equals(this.email, myProfileResponse.email) &&
        Objects.equals(this.firstName, myProfileResponse.firstName) &&
        Objects.equals(this.lastName, myProfileResponse.lastName) &&
        Objects.equals(this.profilePictureUrl, myProfileResponse.profilePictureUrl) &&
        Objects.equals(this.partnerUserId, myProfileResponse.partnerUserId) &&
        Objects.equals(this.cookieConsent, myProfileResponse.cookieConsent) &&
        Objects.equals(this.cookieConsentType, myProfileResponse.cookieConsentType) &&
        Objects.equals(this.processingConsent, myProfileResponse.processingConsent) &&
        Objects.equals(this.processingConsentType, myProfileResponse.processingConsentType) &&
        Objects.equals(this.parameters, myProfileResponse.parameters) &&
        Objects.equals(this.locale, myProfileResponse.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, firstName, lastName, profilePictureUrl, partnerUserId, cookieConsent, cookieConsentType, processingConsent, processingConsentType, parameters, locale);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MyProfileResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    profilePictureUrl: ").append(toIndentedString(profilePictureUrl)).append("\n");
    sb.append("    partnerUserId: ").append(toIndentedString(partnerUserId)).append("\n");
    sb.append("    cookieConsent: ").append(toIndentedString(cookieConsent)).append("\n");
    sb.append("    cookieConsentType: ").append(toIndentedString(cookieConsentType)).append("\n");
    sb.append("    processingConsent: ").append(toIndentedString(processingConsent)).append("\n");
    sb.append("    processingConsentType: ").append(toIndentedString(processingConsentType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
