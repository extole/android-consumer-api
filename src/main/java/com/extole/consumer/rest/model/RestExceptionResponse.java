/*
 * Extole consumer-api
 * This is a sample generated doc.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@extole.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extole.consumer.rest.model;

import java.util.*;
import java.time.*;
import java.math.*;
import com.extole.consumer.*;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.HashMap;
/**
 * Represents the API error response
 */
@Schema(description = "Represents the API error response")

public class RestExceptionResponse {
  @JsonProperty("unique_id")
  private String uniqueId = null;

  @JsonProperty("http_status_code")
  private Integer httpStatusCode = null;

  @JsonProperty("code")
  private String code = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("parameters")
  private Map<String, Object> parameters = null;

  public RestExceptionResponse uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

   /**
   * Unique id associated with this error, useful for discussions with Extole
   * @return uniqueId
  **/
  @Schema(description = "Unique id associated with this error, useful for discussions with Extole")
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }

  public RestExceptionResponse httpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    return this;
  }

   /**
   * HTTP status code that was returned with this error, useful if client get response code
   * @return httpStatusCode
  **/
  @Schema(description = "HTTP status code that was returned with this error, useful if client get response code")
  public Integer getHttpStatusCode() {
    return httpStatusCode;
  }

  public void setHttpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
  }

  public RestExceptionResponse code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Specific error code for this error type, documented per endpoint
   * @return code
  **/
  @Schema(description = "Specific error code for this error type, documented per endpoint")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public RestExceptionResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * User readable English description of the error
   * @return message
  **/
  @Schema(description = "User readable English description of the error")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public RestExceptionResponse parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RestExceptionResponse putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Attributes related to the error, varies be error code, documented per endpoint
   * @return parameters
  **/
  @Schema(description = "Attributes related to the error, varies be error code, documented per endpoint")
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestExceptionResponse restExceptionResponse = (RestExceptionResponse) o;
    return Objects.equals(this.uniqueId, restExceptionResponse.uniqueId) &&
        Objects.equals(this.httpStatusCode, restExceptionResponse.httpStatusCode) &&
        Objects.equals(this.code, restExceptionResponse.code) &&
        Objects.equals(this.message, restExceptionResponse.message) &&
        Objects.equals(this.parameters, restExceptionResponse.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniqueId, httpStatusCode, code, message, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestExceptionResponse {\n");
    
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    httpStatusCode: ").append(toIndentedString(httpStatusCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
